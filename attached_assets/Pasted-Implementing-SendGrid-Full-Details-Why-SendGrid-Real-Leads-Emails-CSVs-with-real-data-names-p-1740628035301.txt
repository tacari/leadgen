Implementing SendGrid: Full Details
Why SendGrid?
Real Leads: Emails CSVs with real data (names, phones)—$5k–$10k clients act on them—$100k/month scales with volume.

Automation: Daily (Accelerator, Empire), weekly (Engine)—$100k/month hands-off cash flow—$5k–$10k starts smooth.

Reliability: 99% deliverability—million-dollar trust—$5k–$10k clients stay happy—$100k/month retention.
What You Need
SendGrid Account: Free tier (100 emails/day)—scales to $15/month (40k emails)—$5k–$10k kickoff covered.

API Key: Secure access—powers email sends—$100k/month ready.

Plan: Free for now—upgrade later—$5k–$10k fits, $100k/month needs more.
Design & Functionality
Goals
CSV Emails: Send leads as attachments—daily (10–25 leads), weekly (37–38)—$5k–$10k utility—$100k/month scale.

Dynamic: Package-based—Lead Launch (one-time), Engine (weekly), Accelerator/Empire (daily)—million-dollar precision.

Feedback: Flash “Leads emailed!”—$5k–$10k UX—$100k/month trust.
Flow
Post-Payment: Stripe /success—triggers one-time send (Lead Launch)—$5k–$10k instant value.

Scheduled: Daily/weekly sends—Engine (Monday, 37–38), Accelerator (10–12), Empire (20–25)—$100k/month automation.

Content:  
Subject: “Your [Package] Leads - [Date]”  

Body: “Here’s your latest batch—check the CSV!”  

Attachment: leads_[date].csv—real data from Supabase leads.
Implementation in Flask
1. Setup SendGrid
Sign Up: sendgrid.com—free tier—100 emails/day—$5k–$10k start.

API Key: Settings > API Keys > Create API Key—name it “Leadzap”—full access—copy key (e.g., SG.xxx).

Replit Secrets:  
Shell: Open Secrets tab (lock icon)—add:  
SENDGRID_API_KEY=SG.xxx—paste your key—$100k/month secure.
2. Update app.py
Add SendGrid email sending—tie to /success and scheduler:
python
from flask import Flask, render_template, request, redirect, url_for, flash, session
from supabase import create_client, Client
from scraper import scrape_leads
import stripe
import os
from datetime import datetime, timedelta
from flask_apscheduler import APScheduler
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Attachment, FileContent, FileName, FileType, Disposition
import csv
import io
import base64

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key')
supabase_url = os.environ.get('SUPABASE_URL')
supabase_key = os.environ.get('SUPABASE_KEY')
supabase = create_client(supabase_url, supabase_key)
stripe.api_key = os.environ.get('STRIPE_API_KEY')
sendgrid_api_key = os.environ.get('SENDGRID_API_KEY')

scheduler = APScheduler()

def send_lead_email(user_id, package_name):
    user = supabase.table('users').select('email').eq('id', user_id).execute().data[0]
    email = user['email']
    today = datetime.now().date().isoformat()
    leads = supabase.table('leads').select('*').eq('user_id', user_id).gte('date_added', today).execute().data
    if not leads:
        return

    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['Name', 'Email', 'Phone', 'Source', 'Score', 'Verified', 'Status', 'Date Added'])
    for lead in leads:
        writer.writerow([lead['name'], lead['email'], lead.get('phone', 'N/A'), lead['source'], lead['score'], lead['verified'], lead['status'], lead['date_added']])
    csv_content = output.getvalue()
    csv_base64 = base64.b64encode(csv_content.encode('utf-8')).decode('utf-8')

    message = Mail(
        from_email='leads@leadzap.io',
        to_emails=email,
        subject=f'Your {package_name} Leads - {today}',
        html_content=f'<p>Hey there! Here’s your latest batch of {package_name} leads—check the attached CSV!</p>'
    )
    attachment = Attachment(
        FileContent(csv_base64),
        FileName(f'leads_{today}.csv'),
        FileType('text/csv'),
        Disposition('attachment')
    )
    message.attachment = attachment

    sg = SendGridAPIClient(sendgrid_api_key)
    sg.send(message)

@app.route('/success')
def success():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    session_id = request.args.get('session_id')
    stripe_session = stripe.checkout.Session.retrieve(session_id)
    package = stripe_session.metadata.get('package')
    user_id = stripe_session.metadata.get('user_id')
    volumes = {'launch': 50, 'engine': 150, 'accelerator': 300, 'empire': 600}
    volume = volumes.get(package, 0)

    scrape_leads(user_id, volume)
    subscription = {'user_id': user_id, 'package_name': package, 'lead_volume': volume, 'stripe_subscription_id': stripe_session.subscription}
    supabase.table('user_packages').insert(subscription).execute()
    
    if package == 'launch':  # One-time send for Lead Launch
        send_lead_email(user_id, package)

    flash(f'Payment successful! Leads {"emailed" if package == "launch" else "scheduled"} for {package}!')
    return redirect(url_for('dashboard'))

def schedule_lead_delivery():
    users = supabase.table('user_packages').select('user_id, package_name').execute().data
    for user in users:
        user_id = user['user_id']
        package = user['package_name']
        if package == 'engine' and datetime.now().weekday() == 0:  # Monday
            scrape_leads(user_id, 38)  # Weekly batch
            send_lead_email(user_id, package)
        elif package == 'accelerator':
            scrape_leads(user_id, 12)  # Daily batch
            send_lead_email(user_id, package)
        elif package == 'empire':
            scrape_leads(user_id, 25)  # Daily batch
            send_lead_email(user_id, package)

scheduler.init_app(app)
scheduler.add_job(id='lead_delivery', func=schedule_lead_delivery, trigger='interval', hours=24, next_run_time=datetime.now() + timedelta(seconds=10))
scheduler.start()

# Other routes (signup, login, dashboard, etc.) remain...

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)
